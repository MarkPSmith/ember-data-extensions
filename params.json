{
  "name": "Ember-data-extensions",
  "tagline": "",
  "body": "# Ember-Data Extensions\r\n\r\nThis is a collection of additions/alterations to ember-data to A) add convenience helpers and B) provide functionality not part of the default gem.\r\n\r\n### Nested Relations\r\n\r\nYou can now save full nested relation objects, specifying the relations during `save()`:\r\n\r\n```es6\r\npost.save({\r\n  adapterOptions: {\r\n    relationships: ['tags', { author: 'state' }]\r\n  }\r\n});\r\n```\r\n\r\nThe above would send the following JSONAPI payload to the server:\r\n\r\n```es6\r\n{\r\n  data: {\r\n    type: 'posts',\r\n    relationships: {\r\n      tags: {\r\n        data: [\r\n          { type: 'tags', attributes: { name: 'important' } },\r\n          { type: 'tags', id: 123 }\r\n        ]\r\n      },\r\n      author: {\r\n        data: {\r\n          type: 'authors',\r\n          attributes: { name: 'Joe Author' },\r\n          relationships: {\r\n            state: {\r\n              data: {\r\n                type: 'states',\r\n                id: 456\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nYou can disassociate an associated object by using `markForDeletion`. This will send a `_delete` attribute to the server:\r\n\r\n```es6\r\npost.get('tags.firstObject').markForDestruction();\r\npost.save({ relationships: 'tags' });\r\n```\r\n\r\nSends:\r\n\r\n```es6\r\n{\r\n  data: {\r\n    type: 'posts',\r\n    relationships: {\r\n      tags: {\r\n        data: {\r\n          type: 'tags',\r\n          id: '123',\r\n          attributes: { _delete: true }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf you want to destroy the associated record as well, use `markForDestruction` instead. This will send `_destroy: true` instead of `_delete: true`.\r\n\r\n### Dirty Properties\r\n\r\nIf an object is not dirty, we will only send its resource identifier (`id`/`type`) to the server (not the ember-data behavior). This is to solve a concurrency issue. Consider two users load the same `post` form, where user A edits the title and user B edits the description. User A submits the form first, then user B submits. User B would overwrite the title user A entered, even though they didn't change anything.\r\n\r\nSince we only send dirty attributes to the server, this issue is mitigated as much as possible.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}